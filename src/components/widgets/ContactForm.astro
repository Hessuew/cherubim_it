---

---

<div class="container">
  <section id="formHolder">
    <div class="row">
      <!-- Brand Box -->
      <div class="col-sm-6 brand">
        <a href="#" class="logo">MR <span>.</span></a>

        <div class="heading">
          <h2>Marina</h2>
          <p>Your Right Choice</p>
        </div>

        <div class="success-msg">
          <p>Great! You are one of our members now</p>
          <a href="#" class="profile">Your Profile</a>
        </div>
      </div>

      <!-- Form Box -->
      <div class="col-sm-6 form">
        <!-- Contact Form -->
        <div class="contact form-peice switched">
          <form class="contact-form" action="#" method="post">
            <div class="form-group">
              <label for="name">Full Name</label>
              <input type="text" name="username" id="name" class="name" />
              <span class="error"></span>
            </div>

            <div class="form-group">
              <label for="email">Email Adderss</label>
              <input type="email" name="emailAdress" id="email" class="email" />
              <span class="error"></span>
            </div>

            <div class="form-group">
              <label for="message">Message</label>
              <textarea name="message" id="message" class="message"></textarea>
              <span class="error"></span>
            </div>

            <div class="CTA">
              <input type="submit" value="Send Message" id="submit" />
              <a href="#" class="switch">I have an account</a>
            </div>
          </form>
        </div><!-- End Contact Form -->
      </div>
    </div>
  </section>

  <footer>
    <p>
      Form made by: <a href="http://mohmdhasan.tk" target="_blank">Mohmdhasan.tk</a>
    </p>
  </footer>
</div>

<style>
  body {
    font-family: 'Montserrat', sans-serif;
    background: #f7edd5;
  }

  .container {
    max-width: 900px;
  }

  a {
    display: inline-block;
    text-decoration: none;
  }

  input {
    outline: none !important;
  }

  h1 {
    text-align: center;
    text-transform: uppercase;
    margin-bottom: 40px;
    font-weight: 700;
  }

  section#formHolder {
    padding: 50px 0;
  }

  .brand {
    padding: 20px;
    background: url(https://goo.gl/A0ynht);
    background-size: cover;
    background-position: center center;
    color: #fff;
    min-height: 540px;
    position: relative;
    box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.3);
    transition: all 0.6s cubic-bezier(1, -0.375, 0.285, 0.995);
    z-index: 9999;
  }
  .brand.active {
    width: 100%;
  }
  .brand::before {
    content: '';
    display: block;
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background: rgba(0, 0, 0, 0.85);
    z-index: -1;
  }
  .brand a.logo {
    color: #f95959;
    font-size: 20px;
    font-weight: 700;
    text-decoration: none;
    line-height: 1em;
  }
  .brand a.logo span {
    font-size: 30px;
    color: #fff;
    transform: translateX(-5px);
    display: inline-block;
  }
  .brand .heading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    transition: all 0.6s;
  }
  .brand .heading.active {
    top: 100px;
    left: 100px;
    transform: translate(0);
  }
  .brand .heading h2 {
    font-size: 70px;
    font-weight: 700;
    text-transform: uppercase;
    margin-bottom: 0;
  }
  .brand .heading p {
    font-size: 15px;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 2px;
    white-space: 4px;
    font-family: 'Raleway', sans-serif;
  }
  .brand .success-msg {
    width: 100%;
    text-align: center;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    margin-top: 60px;
  }
  .brand .success-msg p {
    font-size: 25px;
    font-weight: 400;
    font-family: 'Raleway', sans-serif;
  }
  .brand .success-msg a {
    font-size: 12px;
    text-transform: uppercase;
    padding: 8px 30px;
    background: #f95959;
    text-decoration: none;
    color: #fff;
    border-radius: 30px;
  }
  .brand .success-msg p,
  .brand .success-msg a {
    transition: all 0.9s;
    transform: translateY(20px);
    opacity: 0;
  }
  .brand .success-msg p.active,
  .brand .success-msg a.active {
    transform: translateY(0);
    opacity: 1;
  }

  .form {
    position: relative;
  }
  .form .form-peice {
    background: #fff;
    min-height: 480px;
    margin-top: 30px;
    box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);
    color: #bbbbbb;
    padding: 30px 0 60px;
    transition: all 0.9s cubic-bezier(1, -0.375, 0.285, 0.995);
    position: absolute;
    top: 0;
    left: -30%;
    width: 130%;
    overflow: hidden;
  }
  .form .form-peice.switched {
    transform: translateX(-100%);
    width: 100%;
    left: 0;
  }
  .form form {
    padding: 0 40px;
    margin: 0;
    width: 70%;
    position: absolute;
    top: 50%;
    left: 60%;
    transform: translate(-50%, -50%);
  }
  .form form .form-group {
    margin-bottom: 5px;
    position: relative;
  }
  .form form .form-group.hasError input {
    border-color: #f95959 !important;
  }
  .form form .form-group.hasError label {
    color: #f95959 !important;
  }
  .form form label {
    font-size: 12px;
    font-weight: 400;
    text-transform: uppercase;
    font-family: 'Montserrat', sans-serif;
    transform: translateY(40px);
    transition: all 0.4s;
    cursor: text;
    z-index: -1;
  }
  .form form label.active {
    transform: translateY(10px);
    font-size: 10px;
  }
  .form form label.fontSwitch {
    font-family: 'Raleway', sans-serif !important;
    font-weight: 600;
  }
  .form form input:not([type='submit']) {
    background: none;
    outline: none;
    border: none;
    display: block;
    padding: 10px 0;
    width: 100%;
    border-bottom: 1px solid #eee;
    color: #444;
    font-size: 15px;
    font-family: 'Montserrat', sans-serif;
    z-index: 1;
  }
  .form form input:not([type='submit']).hasError {
    border-color: #f95959;
  }
  .form form span.error {
    color: #f95959;
    font-family: 'Montserrat', sans-serif;
    font-size: 12px;
    position: absolute;
    bottom: -20px;
    right: 0;
    display: none;
  }
  .form form input[type='password'] {
    color: #f95959;
  }
  .form form .CTA {
    margin-top: 30px;
  }
  .form form .CTA input {
    font-size: 12px;
    text-transform: uppercase;
    padding: 5px 30px;
    background: #f95959;
    color: #fff;
    border-radius: 30px;
    margin-right: 20px;
    border: none;
    font-family: 'Montserrat', sans-serif;
  }
  .form form .CTA a.switch {
    font-size: 13px;
    font-weight: 400;
    font-family: 'Montserrat', sans-serif;
    color: #bbbbbb;
    text-decoration: underline;
    transition: all 0.3s;
  }
  .form form .CTA a.switch:hover {
    color: #f95959;
  }

  footer {
    text-align: center;
  }
  footer p {
    color: #777;
  }
  footer p a,
  footer p a:focus {
    color: #b8b09f;
    transition: all 0.3s;
    text-decoration: none !important;
  }
  footer p a:hover,
  footer p a:focus:hover {
    color: #f95959;
  }

  @media (max-width: 768px) {
    .container {
      overflow: hidden;
    }

    section#formHolder {
      padding: 0;
    }
    section#formHolder div.brand {
      min-height: 200px !important;
    }
    section#formHolder div.brand.active {
      min-height: 100vh !important;
    }
    section#formHolder div.brand .heading.active {
      top: 200px;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    section#formHolder div.brand .success-msg p {
      font-size: 16px;
    }
    section#formHolder div.brand .success-msg a {
      padding: 5px 30px;
      font-size: 10px;
    }
    section#formHolder .form {
      width: 80vw;
      min-height: 500px;
      margin-left: 10vw;
    }
    section#formHolder .form .form-peice {
      margin: 0;
      top: 0;
      left: 0;
      width: 100% !important;
      transition: all 0.5s ease-in-out;
    }
    section#formHolder .form .form-peice.switched {
      transform: translateY(-100%);
      width: 100%;
      left: 0;
    }
    section#formHolder .form .form-peice > form {
      width: 100% !important;
      padding: 60px;
      left: 50%;
    }
  }
  @media (max-width: 480px) {
    section#formHolder .form {
      width: 100vw;
      margin-left: 0;
    }

    h2 {
      font-size: 50px !important;
    }
  }
</style>

<script>
  // Form validation and submission handling
  document.addEventListener('DOMContentLoaded', () => {
    // Type definitions
    interface FormState {
      nameError: boolean;
      emailError: boolean;
      messageError: boolean;
    }

    // Form state
    const formState: FormState = {
      nameError: true,
      emailError: true,
      messageError: true,
    };

    // DOM elements
    const contactForm = document.querySelector('form.contact-form') as HTMLFormElement;
    const inputs = document.querySelectorAll('input, textarea') as NodeListOf<HTMLInputElement | HTMLTextAreaElement>;

    // Helper functions
    function showError(element: HTMLElement, message: string): void {
      const errorSpan = element.querySelector('span.error') as HTMLElement;
      const formGroup = element.closest('.form-group') as HTMLElement;

      if (errorSpan && formGroup) {
        errorSpan.textContent = message;
        errorSpan.style.display = 'block';
        formGroup.classList.add('hasError');
      }
    }

    function hideError(element: HTMLElement): void {
      const errorSpan = element.querySelector('span.error') as HTMLElement;
      const formGroup = element.closest('.form-group') as HTMLElement;

      if (errorSpan && formGroup) {
        errorSpan.textContent = '';
        errorSpan.style.display = 'none';
        formGroup.classList.remove('hasError');
      }
    }

    function validateEmail(email: string): boolean {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    // Label effect
    inputs.forEach((input) => {
      // Initial check for pre-filled inputs
      if (input.value.length > 0) {
        const label = input.previousElementSibling as HTMLLabelElement;
        if (label && label.tagName === 'LABEL') {
          label.classList.add('active');
        }
      }

      // Focus event
      input.addEventListener('focus', () => {
        const label = input.previousElementSibling as HTMLLabelElement;
        if (label && label.tagName === 'LABEL') {
          label.classList.add('active');
        }
      });

      // Blur event for validation
      input.addEventListener('blur', () => {
        const parentElement = input.parentElement as HTMLElement;

        // Name validation
        if (input.classList.contains('name')) {
          if (input.value.length === 0) {
            showError(parentElement, 'Please enter your name');
            formState.nameError = true;
          } else if (input.value.length < 2) {
            showError(parentElement, 'Name must be at least 2 characters');
            formState.nameError = true;
          } else {
            hideError(parentElement);
            formState.nameError = false;
          }
        }

        // Email validation
        if (input.classList.contains('email')) {
          if (input.value.length === 0) {
            showError(parentElement, 'Please enter your email address');
            formState.emailError = true;
          } else if (!validateEmail(input.value)) {
            showError(parentElement, 'Please enter a valid email address');
            formState.emailError = true;
          } else {
            hideError(parentElement);
            formState.emailError = false;
          }
        }

        // Message validation
        if (input.classList.contains('message')) {
          if (input.value.length === 0) {
            showError(parentElement, 'Please enter your message');
            formState.messageError = true;
          } else if (input.value.length < 10) {
            showError(parentElement, 'Message must be at least 10 characters');
            formState.messageError = true;
          } else {
            hideError(parentElement);
            formState.messageError = false;
          }
        }

        // Label effect (remove active class if empty)
        if (input.value.length === 0) {
          const label = input.previousElementSibling as HTMLLabelElement;
          if (label && label.tagName === 'LABEL') {
            label.classList.remove('active');
          }
        }
      });
    });

    // Form submission
    if (contactForm) {
      contactForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        // Trigger validation on all fields
        inputs.forEach((input) => {
          input.dispatchEvent(new Event('blur'));
        });

        // Check if form is valid
        if (!formState.nameError && !formState.emailError && !formState.messageError) {
          try {
            // const formData = new FormData(contactForm);
            const formElement = document.querySelector('.form') as HTMLElement;
            const successMsg = document.querySelector('.success-msg') as HTMLElement;

            // Here you would typically send the form data to your backend
            // For example:
            // const response = await fetch('/api/contact', {
            //   method: 'POST',
            //   body: formData
            // });

            // Show success message
            if (formElement && successMsg) {
              // Add transition classes
              document.querySelector('.contact')?.classList.add('switched');

              setTimeout(() => {
                document.querySelector('.contact')?.classList.add('hidden');
              }, 700);

              setTimeout(() => {
                document.querySelector('.brand')?.classList.add('active');
              }, 300);

              setTimeout(() => {
                document.querySelector('.heading')?.classList.add('active');
              }, 600);

              setTimeout(() => {
                const successParagraph = successMsg.querySelector('p');
                if (successParagraph) successParagraph.classList.add('active');
              }, 900);

              setTimeout(() => {
                const successLink = successMsg.querySelector('a');
                if (successLink) successLink.classList.add('active');
              }, 1050);

              setTimeout(() => {
                if (formElement) formElement.style.display = 'none';
              }, 700);
            }
          } catch (error) {
            console.error('Error submitting form:', error);
            // Handle error case
          }
        }
      });
    }

    // Reset form on "Try Again" click
    const resetLink = document.querySelector('a.profile');
    if (resetLink) {
      resetLink.addEventListener('click', (e) => {
        e.preventDefault();
        window.location.reload();
      });
    }
  });
</script>
